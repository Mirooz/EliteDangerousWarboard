package be.mirooz.elitedangerous.dashboard.controller;

import be.mirooz.elitedangerous.commons.lib.models.commodities.minerals.MineralType;
import be.mirooz.elitedangerous.dashboard.controller.ui.component.CurrentCargoComponent;
import be.mirooz.elitedangerous.dashboard.controller.ui.component.CurrentProspectorComponent;
import be.mirooz.elitedangerous.dashboard.controller.ui.component.MiningHistoryComponent;
import be.mirooz.elitedangerous.dashboard.controller.ui.component.MiningSearchPanelComponent;
import be.mirooz.elitedangerous.dashboard.controller.ui.manager.UIManager;
import be.mirooz.elitedangerous.dashboard.service.LocalizationService;
import be.mirooz.elitedangerous.dashboard.service.PreferencesService;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;

import java.net.URL;
import java.util.ResourceBundle;

/**
 * Contr√¥leur pour le panneau de mining - Refactoris√© avec composants
 * <p>
 * Cette classe a √©t√© refactoris√©e pour utiliser des composants s√©par√©s :
 * - MiningSearchPanelComponent : gestion de la recherche de routes
 * - CurrentProspectorComponent : affichage et navigation des prospecteurs
 * - CurrentCargoComponent : affichage du cargo actuel
 * - MiningHistoryComponent : historique des sessions de minage
 * <p>
 * Le contr√¥leur principal coordonne maintenant ces composants et g√®re les interactions entre eux.
 */
public class MiningController implements Initializable, IRefreshable, IBatchListener {

    // Conteneurs pour les composants
    @FXML
    private VBox miningSearchPanelContainer;
    @FXML
    private VBox currentProspectorContainer;
    @FXML
    private VBox currentCargoContainer;
    @FXML
    private VBox miningHistoryContainer;

    // Labels pour les traductions
    @FXML
    private Label miningTitleLabel;

    // Services
    private final LocalizationService localizationService = LocalizationService.getInstance();
    private final PreferencesService preferencesService = PreferencesService.getInstance();

    // Composants
    private MiningSearchPanelComponent miningSearchPanel;
    private CurrentProspectorComponent currentProspector;
    private CurrentCargoComponent currentCargo;
    private MiningHistoryComponent miningHistory;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        initializePricePreference();
        initializeComponents();
        setupComponentCallbacks();
        updateTranslations();
        UIManager.getInstance().register(this);

        // √âcouter les changements de langue
        localizationService.addLanguageChangeListener(locale -> updateTranslations());
    }

    @Override
    public void onBatchEnd() {
        if (miningSearchPanel != null) {
            miningSearchPanel.initializeMineralComboBox();
        }
    }

    /**
     * Initialise les composants en les chargeant depuis leurs fichiers FXML
     */
    private void initializeComponents() {
        try {
            // Charger le composant de recherche de minage
            FXMLLoader searchLoader = new FXMLLoader(getClass().getResource("/fxml/mining/mining-search-panel.fxml"));
            VBox searchPanel = searchLoader.load();
            miningSearchPanel = searchLoader.getController();
            if (miningSearchPanelContainer != null) {
                miningSearchPanelContainer.getChildren().add(searchPanel);
            }

            // Charger le composant de prospecteur actuel
            FXMLLoader prospectorLoader = new FXMLLoader(getClass().getResource("/fxml/mining/current-prospector.fxml"));
            VBox prospectorPanel = prospectorLoader.load();
            currentProspector = prospectorLoader.getController();
            if (currentProspectorContainer != null) {
                currentProspectorContainer.getChildren().add(prospectorPanel);
            }

            // Charger le composant de cargo actuel
            FXMLLoader cargoLoader = new FXMLLoader(getClass().getResource("/fxml/mining/current-cargo.fxml"));
            VBox cargoPanel = cargoLoader.load();
            currentCargo = cargoLoader.getController();
            if (currentCargoContainer != null) {
                currentCargoContainer.getChildren().add(cargoPanel);
            }

            // Charger le composant d'historique de minage
            FXMLLoader historyLoader = new FXMLLoader(getClass().getResource("/fxml/mining/mining-history.fxml"));
            VBox historyPanel = historyLoader.load();
            miningHistory = historyLoader.getController();
            if (miningHistoryContainer != null) {
                miningHistoryContainer.getChildren().add(historyPanel);
            }

            System.out.println("‚úÖ Composants mining charg√©s avec succ√®s depuis leurs fichiers FXML");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du chargement des composants mining: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Configure les callbacks entre les composants
     */
    private void setupComponentCallbacks() {
        if (miningSearchPanel != null) {
            // Quand un min√©ral est s√©lectionn√©, mettre √† jour les autres composants
            miningSearchPanel.setOnMineralSelected(mineral -> {
                // Le composant de recherche g√®re d√©j√† la recherche
                // On peut ajouter d'autres actions ici si n√©cessaire
            });

            // Quand une recherche est termin√©e, mettre √† jour le cargo et l'historique
            miningSearchPanel.setOnSearchCompleted(() -> {
                if (currentCargo != null) {
                    currentCargo.refresh();
                }
                if (miningHistory != null) {
                    miningHistory.refresh();
                }
            });
        }

        if (currentProspector != null) {
            // Quand le prospecteur change, mettre √† jour le cargo
            currentProspector.setOnProspectorChanged(() -> {
                if (currentCargo != null) {
                    currentCargo.refresh();
                }
            });
        }

        if (currentCargo != null) {
            // Quand le cargo est mis √† jour, on peut d√©clencher d'autres actions
            currentCargo.setOnCargoUpdated(() -> {
                // Actions suppl√©mentaires si n√©cessaire
            });
        }

        if (miningHistory != null) {
            // Quand l'historique est mis √† jour
            miningHistory.setOnHistoryUpdated(() -> {
                // Actions suppl√©mentaires si n√©cessaire
            });
        }
    }
    /**
     * Initialise les pr√©f√©rences de prix des min√©raux
     */
    private void initializePricePreference() {
        System.out.println("üìä Chargement des prix des min√©raux depuis les pr√©f√©rences...");
        for (MineralType mineralType : MineralType.values()) {
            String priceStr = preferencesService.getPreference("mineral.price." + mineralType.getCargoJsonName(), null);
            if (priceStr != null) {
                try {
                    int price = Integer.parseInt(priceStr);
                    mineralType.setPrice(price);
                    System.out.printf("üí∞ Prix charg√© pour %s: %d Cr (cache pr√©-charg√©)%n", mineralType.getVisibleName(), price);
                } catch (NumberFormatException e) {
                    System.err.printf("‚ùå Erreur lors du parsing du prix pour %s: %s%n", mineralType.getCargoJsonName(), priceStr);
                }
            }
        }
    }

    /**
     * Met √† jour toutes les traductions de l'interface
     */
    private void updateTranslations() {
        if (miningTitleLabel != null) {
            miningTitleLabel.setText(getTranslation("mining.title"));
        }
    }

    /**
     * R√©cup√®re une traduction depuis le LocalizationService
     */
    private String getTranslation(String key) {
        return localizationService.getString(key);
    }

    @Override
    public void refreshUI() {
        if (miningSearchPanel != null) {
            // Le composant de recherche se met √† jour automatiquement
        }
        if (currentProspector != null) {
            currentProspector.refresh();
        }
        if (currentCargo != null) {
            currentCargo.refresh();
        }
        if (miningHistory != null) {
            miningHistory.refresh();
        }
    }

    // M√©thodes pour maintenir la compatibilit√© avec le fichier FXML existant
    // Ces m√©thodes d√©l√®guent maintenant aux composants appropri√©s

    /**
     * G√®re le toggle du checkbox Fleet Carrier
     */
    @FXML
    public void onFleetCarrierToggle() {
        if (miningSearchPanel != null) {
            miningSearchPanel.onFleetCarrierToggle();
        }
    }

    /**
     * G√®re le toggle du checkbox Pads
     */
    @FXML
    public void onPadsToggle() {
        if (miningSearchPanel != null) {
            miningSearchPanel.onPadsToggle();
        }
    }

    /**
     * Affiche le prospecteur pr√©c√©dent
     */
    @FXML
    public void showPreviousProspector() {
        if (currentProspector != null) {
            currentProspector.showPreviousProspector();
        }
    }

    /**
     * Affiche le prospecteur suivant
     */
    @FXML
    public void showNextProspector() {
        if (currentProspector != null) {
            currentProspector.showNextProspector();
        }
    }

    /**
     * Gestionnaire de clic pour le conteneur de l'anneau
     */
    @FXML
    public void onRingContainerClicked(MouseEvent event) {
        if (miningSearchPanel != null) {
            miningSearchPanel.onRingContainerClicked(event);
        }
    }

    /**
     * Gestionnaire de clic pour le conteneur de la station
     */
    @FXML
    public void onStationContainerClicked(MouseEvent event) {
        if (miningSearchPanel != null) {
            miningSearchPanel.onStationContainerClicked(event);
        }
    }

    // Getters pour acc√©der aux composants depuis l'ext√©rieur
    public MiningSearchPanelComponent getMiningSearchPanel() {
        return miningSearchPanel;
    }

    public CurrentProspectorComponent getCurrentProspector() {
        return currentProspector;
    }

    public CurrentCargoComponent getCurrentCargo() {
        return currentCargo;
    }

    public MiningHistoryComponent getMiningHistory() {
        return miningHistory;
    }
}